name: Instafel APK Patcher

on:
  workflow_dispatch:
    inputs:
      instagram_apk_url:
        description: 'Instagram Alpha APK/AAB/APKM Download URL'
        required: true
        type: string
      apk_version:
        description: 'APK Version (for naming)'
        required: true
        type: string
        default: 'latest'

jobs:
  patch-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Instafel Repository
      uses: actions/checkout@v4
      with:
        repository: mamiiblt/instafel
        path: instafel
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.0
    
    - name: Install APK Tools & APKM Handler
      run: |
        sudo apt-get update
        sudo apt-get install -y apktool aapt zipalign unzip
        
        # Download and install apksigner
        wget https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar
        chmod +x uber-apk-signer-1.3.0.jar
        sudo mv uber-apk-signer-1.3.0.jar /usr/local/bin/uber-apk-signer.jar
        
        # Download bundletool for converting AAB to APK (if needed)
        wget https://github.com/google/bundletool/releases/download/1.15.6/bundletool-all-1.15.6.jar
        chmod +x bundletool-all-1.15.6.jar
        sudo mv bundletool-all-1.15.6.jar /usr/local/bin/bundletool.jar
        
        # Install APK Editor Studio for APKM handling (alternative approach)
        wget https://github.com/kefir500/apk-editor-studio/releases/download/v1.7.1/apk-editor-studio_1.7.1_linux_portable.tar.gz
        tar -xzf apk-editor-studio_1.7.1_linux_portable.tar.gz
    
    - name: Download Instagram Bundle/APK
      run: |
        echo "Downloading Instagram file..."
        
        # Use curl with user agent and headers to bypass basic bot detection
        curl -L \
          -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" \
          -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
          -H "Accept-Language: en-US,en;q=0.5" \
          -H "Accept-Encoding: gzip, deflate" \
          -H "Connection: keep-alive" \
          -o instagram-file \
          "${{ github.event.inputs.instagram_apk_url }}"
        
        # Check if download was successful
        if [ ! -f instagram-file ] || [ ! -s instagram-file ]; then
          echo "‚ùå Download failed or file is empty"
          echo "This might be due to:"
          echo "1. APKMirror's anti-bot protection"
          echo "2. Invalid/expired download URL"
          echo "3. Network issues"
          echo ""
          echo "üí° Solutions:"
          echo "1. Try getting the direct download URL from APKMirror's download page"
          echo "2. Use a different APK source (APKPure, APKMonk)"
          echo "3. Upload the APK file to your repository and use a GitHub raw URL"
          exit 1
        fi
        
        # Check file size (should be > 50MB for Instagram)
        file_size=$(stat -c%s instagram-file)
        if [ $file_size -lt 50000000 ]; then
          echo "‚ö†Ô∏è File seems too small (${file_size} bytes)"
          echo "This might be an error page instead of the actual APK/AAB"
          echo "Content preview:"
          head -n 20 instagram-file
          echo ""
          echo "üí° Try getting a fresh download URL from APKMirror"
          exit 1
        fi
        
        # Check if it's an APKM, AAB, or APK
        file_type=$(file instagram-file)
        echo "File type: $file_type"
        echo "File size: $(du -h instagram-file | cut -f1)"
        
        # Check file extension from URL
        url_lower=$(echo "${{ github.event.inputs.instagram_apk_url }}" | tr '[:upper:]' '[:lower:]')
        
        if [[ $url_lower == *".apkm"* ]] || [[ $file_type == *"Zip archive"* ]]; then
          # Try to determine if it's APKM by checking contents
          if unzip -l instagram-file 2>/dev/null | grep -q "base.apk\|split_config"; then
            echo "‚úÖ Detected APKM file (APKMirror format)"
            mv instagram-file instagram-alpha.apkm
            echo "BUNDLE_TYPE=apkm" >> $GITHUB_ENV
          elif [[ $file_type == *"Android App Bundle"* ]]; then
            echo "‚úÖ Detected Android App Bundle (AAB)"
            mv instagram-file instagram-alpha.aab
            echo "BUNDLE_TYPE=aab" >> $GITHUB_ENV
          else
            echo "‚úÖ Detected APK"
            mv instagram-file instagram-alpha.apk
            echo "BUNDLE_TYPE=apk" >> $GITHUB_ENV
          fi
        else
          echo "‚úÖ Detected APK"
          mv instagram-file instagram-alpha.apk
          echo "BUNDLE_TYPE=apk" >> $GITHUB_ENV
        fi
        
        ls -la instagram-alpha.*
    
    - name: Setup Gradle
      run: |
        cd instafel
        chmod +x gradlew
        ./gradlew --version
    
    - name: Build Instafel Patcher
      run: |
        cd instafel
        ./gradlew build
        
        # Find the built patcher JAR
        find . -name "*.jar" -type f | grep -E "(patcher|instafel)" | head -5
    
    - name: Convert Bundle/APKM to APK (if needed) and Patch
      run: |
        # Create working directory
        mkdir -p workspace
        cd workspace
        
        if [[ "$BUNDLE_TYPE" == "apkm" ]]; then
          echo "Converting APKM to APK..."
          cp ../instagram-alpha.apkm ./
          
          # Extract APKM file (it's a zip containing multiple APKs)
          mkdir apkm_extracted
          unzip instagram-alpha.apkm -d apkm_extracted/
          
          echo "APKM contents:"
          ls -la apkm_extracted/
          
          # Look for base.apk (main APK) or largest APK file
          if [ -f "apkm_extracted/base.apk" ]; then
            echo "Found base.apk - using as main APK"
            cp apkm_extracted/base.apk instagram-alpha.apk
          else
            # Find the largest APK file (usually the main one)
            largest_apk=$(find apkm_extracted/ -name "*.apk" -exec ls -la {} \; | sort -k5 -nr | head -n1 | awk '{print $9}')
            if [ -n "$largest_apk" ]; then
              echo "Using largest APK: $largest_apk"
              cp "$largest_apk" instagram-alpha.apk
            else
              echo "‚ùå No APK files found in APKM"
              exit 1
            fi
          fi
          
          echo "Conversion completed. APK size:"
          ls -lh instagram-alpha.apk
          
        elif [[ "$BUNDLE_TYPE" == "aab" ]]; then
          echo "Converting AAB to APK..."
          cp ../instagram-alpha.aab ./
          
          # Convert AAB to APKs using bundletool
          java -jar /usr/local/bin/bundletool.jar build-apks --bundle=instagram-alpha.aab --output=instagram-alpha.apks --mode=universal
          
          # Extract the universal APK
          unzip instagram-alpha.apks
          cp universal.apk instagram-alpha.apk
          
          echo "Conversion completed. APK size:"
          ls -lh instagram-alpha.apk
        else
          echo "Using provided APK..."
          cp ../instagram-alpha.apk ./
        fi
        
        # Decompile APK
        echo "Decompiling APK..."
        apktool d instagram-alpha.apk -o instagram-decompiled
        
        # This is where the Instafel injection would happen
        # The exact process depends on how Instafel's patcher works
        # You might need to:
        # 1. Copy Instafel's modified files to the decompiled APK
        # 2. Modify manifest and other configuration files
        # 3. Add Instafel's resources and assets
        
        echo "Patching process would happen here..."
        echo "This step needs to be customized based on Instafel's specific patching logic"
        
        # For now, we'll just recompile the APK as-is
        # In a real implementation, you'd inject Instafel's modifications here
        
        # Recompile APK
        echo "Recompiling APK..."
        apktool b instagram-decompiled -o instagram-patched-unsigned.apk
    
    - name: Sign APK
      run: |
        cd workspace
        
        # Generate a keystore for signing (for demo purposes)
        keytool -genkey -v -keystore release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 -storepass password -keypass password -dname "CN=Developer, OU=Development, O=Company, L=City, S=State, C=US"
        
        # Sign the APK
        java -jar /usr/local/bin/uber-apk-signer.jar --apks instagram-patched-unsigned.apk --ks release-key.keystore --ksAlias alias_name --ksPass password --keyPass password
        
        # Rename the signed APK
        mv instagram-patched-unsigned-aligned-debugSigned.apk instagram-instafel-${{ github.event.inputs.apk_version }}.apk
    
    - name: Upload Patched APK
      uses: actions/upload-artifact@v4
      with:
        name: instafel-patched-apk-${{ github.event.inputs.apk_version }}
        path: workspace/instagram-instafel-${{ github.event.inputs.apk_version }}.apk
        retention-days: 30
    
    - name: Create Release (Optional)
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: patched-${{ github.event.inputs.apk_version }}
        release_name: Instafel Patched Instagram ${{ github.event.inputs.apk_version }}
        body: |
          üöÄ **Patched Instagram APK with Instafel**
          
          - Version: ${{ github.event.inputs.apk_version }}
          - Built: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          
          ‚ö†Ô∏è **Important Notes:**
          - This is a modified version of Instagram
          - Use at your own risk
          - May violate Instagram's Terms of Service
          - Not affiliated with Meta/Instagram
          
          üì± **Installation:**
          1. Enable "Unknown Sources" in Android settings
          2. Download the APK from artifacts
          3. Install on your device
        draft: false
        prerelease: true
