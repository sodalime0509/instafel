name: Instafel APK Patcher (Android 15 Compatible - Fixed)

on:
  workflow_dispatch:
    inputs:
      instagram_apk_url:
        description: 'Instagram APK/AAB/APKM/XAPK Download URL'
        required: true
        type: string
      apk_version:
        description: 'APK Version (for naming)'
        required: true
        type: string
        default: 'latest'
      target_arch:
        description: 'Target Architecture'
        required: false
        type: choice
        default: 'arm64-v8a'
        options:
          - 'arm64-v8a'
          - 'armeabi-v7a'
          - 'universal'

jobs:
  patch-apk:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Instafel Repository
      uses: actions/checkout@v4
      with:
        repository: mamiiblt/instafel
        path: instafel

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Android SDK (Updated for Android 15)
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        target: android-34

    - name: Accept Android SDK Licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Install APK Tools & Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y apktool zipalign unzip xmlstarlet jq wget curl file

        # Install latest apktool version
        wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
        wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
        chmod +x apktool
        sudo mv apktool /usr/local/bin/
        sudo mv apktool_2.9.3.jar /usr/local/bin/apktool.jar

        # Install uber-apk-signer
        wget -q https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar
        chmod +x uber-apk-signer-1.3.0.jar
        sudo mv uber-apk-signer-1.3.0.jar /usr/local/bin/uber-apk-signer.jar

        # Install bundletool
        wget -q https://github.com/google/bundletool/releases/download/1.15.6/bundletool-all-1.15.6.jar
        chmod +x bundletool-all-1.15.6.jar
        sudo mv bundletool-all-1.15.6.jar /usr/local/bin/bundletool.jar

        # Add Android SDK tools to PATH
        echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

        # Verify installations
        echo "Verifying tool installations..."
        apktool --version || echo "⚠️ apktool not found"
        java -jar /usr/local/bin/uber-apk-signer.jar --version || echo "⚠️ uber-apk-signer not found"
        java -jar /usr/local/bin/bundletool.jar version || echo "⚠️ bundletool not found"

    - name: Download Instagram APK/AAB
      run: |
        mkdir -p downloads
        cd downloads

        for i in {1..3}; do
          curl -L \
            -H "User-Agent: Mozilla/5.0 (Android 15; Mobile; rv:109.0) Gecko/109.0 Firefox/115.0" \
            --max-time 300 \
            --retry 3 \
            --retry-delay 5 \
            -o instagram-file \
            "${{ github.event.inputs.instagram_apk_url }}" && break
          sleep 10
        done

        if [ ! -f instagram-file ] || [ ! -s instagram-file ]; then
          echo "❌ Download failed"
          exit 1
        fi

        file_type=$(file instagram-file)
        url_lower=$(echo "${{ github.event.inputs.instagram_apk_url }}" | tr '[:upper:]' '[:lower:]')

        if [[ $url_lower == *".xapk"* ]] || [[ $file_type == *"Zip archive"* ]]; then
          if unzip -l instagram-file | grep -q "manifest.json\|icon.png"; then
            mv instagram-file instagram-alpha.xapk
            echo "BUNDLE_TYPE=xapk" >> $GITHUB_ENV
          elif unzip -l instagram-file | grep -q "base.apk\|split_config"; then
            mv instagram-file instagram-alpha.apkm
            echo "BUNDLE_TYPE=apkm" >> $GITHUB_ENV
          else
            mv instagram-file instagram-alpha.apk
            echo "BUNDLE_TYPE=apk" >> $GITHUB_ENV
          fi
        elif [[ $url_lower == *".apkm"* ]]; then
          mv instagram-file instagram-alpha.apkm
          echo "BUNDLE_TYPE=apkm" >> $GITHUB_ENV
        elif [[ $url_lower == *".aab"* ]]; then
          mv instagram-file instagram-alpha.aab
          echo "BUNDLE_TYPE=aab" >> $GITHUB_ENV
        else
          mv instagram-file instagram-alpha.apk
          echo "BUNDLE_TYPE=apk" >> $GITHUB_ENV
        fi

        mv instagram-alpha.* ../
        cd ..

    - name: Setup Gradle
      run: |
        cd instafel
        chmod +x gradlew
        ./gradlew --version

    - name: Build Instafel Patcher
      run: |
        cd instafel
        if grep -r "keystores/instafel-app.jks" .; then
          mkdir -p config/keystores
          keytool -genkey -v -keystore config/keystores/instafel-app.jks \
            -alias instafel -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass dummy123 -keypass dummy123 \
            -dname "CN=Dummy, OU=Build, O=GitHub, L=Actions, S=CI, C=US"
        fi
        ./gradlew assembleDebug || ./gradlew build -x validateSigningRelease || ./gradlew assemble

    - name: Extract APK and Check Compatibility
      run: |
        mkdir -p workspace
        cd workspace

        # Debug: Check what files are available
        echo "Files in parent directory:"
        ls -la ../
        
        # Handle different bundle types
        if [[ "$BUNDLE_TYPE" == "xapk" ]]; then
          echo "Processing XAPK file..."
          if [ -f "../instagram-alpha.xapk" ]; then
            unzip ../instagram-alpha.xapk -d xapk
            # Find the main APK (usually the largest one)
            main_apk=$(find xapk -name "*.apk" -type f -exec ls -la {} \; | sort -nrk5 | head -n1 | awk '{print $9}')
            if [ -z "$main_apk" ]; then
              main_apk=$(find xapk -name "*.apk" | head -n1)
            fi
            cp "$main_apk" instagram-alpha.apk
            echo "Selected APK: $main_apk"
          else
            echo "❌ XAPK file not found"
            exit 1
          fi
        elif [[ "$BUNDLE_TYPE" == "apkm" ]]; then
          echo "Processing APKM file..."
          if [ -f "../instagram-alpha.apkm" ]; then
            unzip ../instagram-alpha.apkm -d apkm
            
            # Look for architecture-specific APK based on user selection
            if [ "${{ github.event.inputs.target_arch }}" = "arm64-v8a" ]; then
              arch_apk=$(find apkm -name "*arm64*" -o -name "*v8a*" | head -n1)
            elif [ "${{ github.event.inputs.target_arch }}" = "armeabi-v7a" ]; then
              arch_apk=$(find apkm -name "*armeabi*" -o -name "*v7a*" | head -n1)
            fi
            
            if [ -n "$arch_apk" ] && [ -f "$arch_apk" ]; then
              cp "$arch_apk" instagram-alpha.apk
              echo "Selected architecture-specific APK: $arch_apk"
            else
              main_apk=$(find apkm -name "*.apk" -type f -exec ls -la {} \; | sort -nrk5 | head -n1 | awk '{print $9}')
              if [ -z "$main_apk" ]; then
                main_apk=$(find apkm -name "*.apk" | head -n1)
              fi
              cp "$main_apk" instagram-alpha.apk
              echo "Selected main APK: $main_apk"
            fi
          else
            echo "❌ APKM file not found"
            exit 1
          fi
        elif [[ "$BUNDLE_TYPE" == "aab" ]]; then
          echo "Processing AAB file..."
          if [ -f "../instagram-alpha.aab" ]; then
            cp ../instagram-alpha.aab ./
            
            # Create device-specific configuration
            cat > device-spec.json <<EOF
        {
          "supportedAbis": ["${{ github.event.inputs.target_arch }}"],
          "supportedLocales": ["en"],
          "screenDensity": 420,
          "sdkVersion": 34
        }
        EOF
            
            # Extract universal APK
            java -jar /usr/local/bin/bundletool.jar build-apks \
              --bundle=instagram-alpha.aab \
              --output=instagram-alpha.apks \
              --device-spec=device-spec.json \
              --mode=universal
            unzip instagram-alpha.apks
            cp universal.apk instagram-alpha.apk
          else
            echo "❌ AAB file not found"
            exit 1
          fi
        else
          echo "Processing APK file..."
          if [ -f "../instagram-alpha.apk" ]; then
            cp ../instagram-alpha.apk ./
          else
            echo "❌ APK file not found"
            exit 1
          fi
        fi

        # Verify APK file
        if [ ! -f "instagram-alpha.apk" ] || [ ! -s "instagram-alpha.apk" ]; then
          echo "❌ APK file not found or empty"
          exit 1
        fi

        echo "APK size: $(du -h instagram-alpha.apk | cut -f1)"
        echo "APK info:"
        $ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-alpha.apk | head -10 || echo "Could not read APK info"
        
        # Check native libraries
        echo "Checking native libraries..."
        $ANDROID_HOME/build-tools/34.0.0/aapt list instagram-alpha.apk | grep "lib/" | head -5 || echo "No native libraries found"

    - name: Patch APK for Android 15 Compatibility
      run: |
        cd workspace
        
        # Debug: Check current directory and files
        echo "Current directory: $(pwd)"
        echo "Files in workspace:"
        ls -la
        
        # Verify APK file exists
        if [ ! -f "instagram-alpha.apk" ]; then
          echo "❌ instagram-alpha.apk not found in workspace"
          echo "Looking for APK files..."
          find . -name "*.apk" -type f
          exit 1
        fi
        
        # Create backup
        cp instagram-alpha.apk instagram-alpha-backup.apk
        echo "✅ Created backup of original APK"
        
        # Try minimal patching first (preserves more compatibility)
        echo "🔄 Attempting minimal patching..."
        
        # Use aapt to dump current manifest info
        echo "🔍 Analyzing APK manifest..."
        if $ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-alpha.apk > apk_info.txt 2>&1; then
          echo "✅ Successfully extracted APK info"
          cat apk_info.txt | head -10
        else
          echo "⚠️ Could not extract APK info with aapt, continuing with minimal info"
          touch apk_info.txt
        fi
        
        # Extract current values with multiple fallback methods
        current_target=$(grep -o "targetSdkVersion:'[0-9]*'" apk_info.txt | cut -d"'" -f2 | head -1)
        current_min=$(grep -o "minSdkVersion:'[0-9]*'" apk_info.txt | cut -d"'" -f2 | head -1)
        
        # Alternative extraction patterns
        if [ -z "$current_target" ]; then
          current_target=$(grep -o "sdkVersion:'[0-9]*'" apk_info.txt | cut -d"'" -f2 | head -1)
        fi
        if [ -z "$current_target" ]; then
          current_target=$(grep -o "compileSdkVersion:'[0-9]*'" apk_info.txt | cut -d"'" -f2 | head -1)
        fi
        
        # Set safe defaults if extraction fails
        if [ -z "$current_target" ] || ! [[ "$current_target" =~ ^[0-9]+$ ]]; then
          current_target="28"  # Assume older SDK if we can't detect
          echo "⚠️ Could not detect target SDK, assuming $current_target"
        fi
        if [ -z "$current_min" ] || ! [[ "$current_min" =~ ^[0-9]+$ ]]; then
          current_min="21"  # Safe minimum
          echo "⚠️ Could not detect min SDK, assuming $current_min"
        fi
        
        echo "Current targetSdkVersion: $current_target"
        echo "Current minSdkVersion: $current_min"
        
        # Only patch if necessary (with proper integer comparison)
        if [ "$current_target" -lt "30" ] 2>/dev/null; then
          echo "⚠️ Target SDK too low ($current_target), patching required..."
          
          # Full decompilation approach
          echo "🔄 Performing full decompilation..."
          if apktool d instagram-alpha.apk -o instagram-decompiled --force-all; then
            echo "✅ Full decompilation successful"
            
            manifest="instagram-decompiled/AndroidManifest.xml"
            if [ -f "$manifest" ]; then
              echo "📝 Modifying AndroidManifest.xml..."
              cp "$manifest" "${manifest}.bak"
              
              # Conservative SDK updates
              sed -i 's/android:targetSdkVersion="[0-9]*"/android:targetSdkVersion="33"/' "$manifest"
              sed -i 's/android:minSdkVersion="[0-9]*"/android:minSdkVersion="21"/' "$manifest"
              
              # Add essential permissions for Android 15
              if ! grep -q "android.permission.POST_NOTIFICATIONS" "$manifest"; then
                sed -i '/<uses-permission android:name="android.permission.INTERNET"/a\    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />' "$manifest"
              fi
              
              # Remove problematic permissions
              sed -i '/android:name="android.permission.WRITE_EXTERNAL_STORAGE"/d' "$manifest"
              
              # Update application tag for Android 15
              sed -i 's/android:requestLegacyExternalStorage="true"//g' "$manifest"
              
              echo "✅ Manifest modifications completed"
            fi

            # Update apktool.yml
            apktool_yml="instagram-decompiled/apktool.yml"
            if [ -f "$apktool_yml" ]; then
              sed -i 's/targetSdkVersion: .*/targetSdkVersion: 33/' "$apktool_yml"
              sed -i 's/minSdkVersion: .*/minSdkVersion: 21/' "$apktool_yml"
            fi

            # Rebuild APK
            echo "🔄 Rebuilding APK..."
            if apktool b instagram-decompiled -o instagram-patched-unsigned.apk --use-aapt2; then
              echo "✅ APK rebuilt successfully with aapt2"
            elif apktool b instagram-decompiled -o instagram-patched-unsigned.apk; then
              echo "✅ APK rebuilt successfully with aapt1"
            else
              echo "⚠️ Rebuild failed, using original APK"
              cp instagram-alpha.apk instagram-patched-unsigned.apk
            fi
          else
            echo "⚠️ Decompilation failed, using original APK"
            cp instagram-alpha.apk instagram-patched-unsigned.apk
          fi
        else
          echo "✅ APK already compatible (target SDK: $current_target), using original"
          cp instagram-alpha.apk instagram-patched-unsigned.apk
        fi

        # Verify the output APK
        if [ -f "instagram-patched-unsigned.apk" ]; then
          echo "✅ Unsigned APK created: $(du -h instagram-patched-unsigned.apk | cut -f1)"
          echo "Verifying APK structure..."
          $ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-patched-unsigned.apk | head -5 || echo "Could not verify APK"
        else
          echo "❌ Failed to create unsigned APK"
          exit 1
        fi

    - name: Sign APK with Proper Configuration
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'defaultpass123' }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'mykey' }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'defaultpass123' }}
      run: |
        cd workspace
        
        # Verify APK exists
        if [ ! -f "instagram-patched-unsigned.apk" ]; then
          echo "❌ Unsigned APK not found"
          exit 1
        fi

        # Generate signing key
        keytool -genkey -v -keystore release-key.keystore \
          -alias "$KEY_ALIAS" -keyalg RSA -keysize 2048 -validity 10000 \
          -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" \
          -dname "CN=InstafelPatcher, OU=GitHub, O=Actions, L=Cloud, ST=Virtual, C=US"

        # Check if APK is already aligned
        if $ANDROID_HOME/build-tools/34.0.0/zipalign -c 4 instagram-patched-unsigned.apk; then
          echo "✅ APK already aligned"
          cp instagram-patched-unsigned.apk instagram-patched-aligned.apk
        else
          echo "🔄 Aligning APK..."
          $ANDROID_HOME/build-tools/34.0.0/zipalign -f -v 4 instagram-patched-unsigned.apk instagram-patched-aligned.apk
        fi

        # Sign APK with all signature schemes for maximum compatibility
        echo "🔄 Signing APK..."
        $ANDROID_HOME/build-tools/34.0.0/apksigner sign \
          --ks release-key.keystore \
          --ks-key-alias "$KEY_ALIAS" \
          --ks-pass pass:"$KEYSTORE_PASSWORD" \
          --key-pass pass:"$KEY_PASSWORD" \
          --v1-signing-enabled true \
          --v2-signing-enabled true \
          --v3-signing-enabled true \
          --v4-signing-enabled false \
          --out instagram-instafel-${{ github.event.inputs.apk_version }}.apk \
          instagram-patched-aligned.apk

        # Verify signature
        echo "🔍 Verifying signature..."
        if $ANDROID_HOME/build-tools/34.0.0/apksigner verify --verbose instagram-instafel-${{ github.event.inputs.apk_version }}.apk; then
          echo "✅ APK signature verified successfully"
        else
          echo "⚠️ APK signature verification failed, trying alternative method..."
          
          # Fallback: Use uber-apk-signer
          java -jar /usr/local/bin/uber-apk-signer.jar \
            --apks instagram-patched-aligned.apk \
            --out ./ \
            --allowResign \
            --overwrite
          
          # Find the output file
          signed_apk=$(find . -name "*-aligned-debugSigned.apk" | head -1)
          if [ -n "$signed_apk" ]; then
            mv "$signed_apk" instagram-instafel-${{ github.event.inputs.apk_version }}.apk
            echo "✅ APK signed with uber-apk-signer"
          fi
        fi

        # Final verification
        if [ -f "instagram-instafel-${{ github.event.inputs.apk_version }}.apk" ]; then
          echo "✅ Final APK created: $(du -h instagram-instafel-${{ github.event.inputs.apk_version }}.apk | cut -f1)"
          echo "Final APK info:"
          $ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-instafel-${{ github.event.inputs.apk_version }}.apk | head -5
        else
          echo "❌ Final APK not found"
          exit 1
        fi

    - name: Upload Patched APK
      uses: actions/upload-artifact@v4
      with:
        name: instafel-patched-apk-${{ github.event.inputs.apk_version }}
        path: workspace/instagram-instafel-${{ github.event.inputs.apk_version }}.apk
        retention-days: 30

    - name: Generate Comprehensive Installation Guide
      run: |
        cd workspace
        
        # Get APK info for the guide
        apk_info=$($ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-instafel-${{ github.event.inputs.apk_version }}.apk || echo "Could not read APK info")
        
        cat <<EOF > installation-guide.md
        # Installation Guide for Instafel Patched Instagram

        ## APK Information
        - Version: ${{ github.event.inputs.apk_version }}
        - Target Architecture: ${{ github.event.inputs.target_arch }}
        - Build Date: $(date)
        - Android 15 Compatible: Yes

        ## Pre-Installation Steps

        ### 1. Uninstall Original Instagram
        - Go to Settings > Apps > Instagram
        - Tap "Uninstall" (This prevents signature conflicts)

        ### 2. Enable Unknown Sources
        - Go to Settings > Security > Unknown Sources
        - Or Settings > Apps > Special Access > Install Unknown Apps
        - Enable for your file manager or browser

        ### 3. Disable Play Protect (Recommended)
        - Open Google Play Store
        - Tap profile picture > Play Protect
        - Disable "Scan apps with Play Protect"

        ## Installation Steps

        1. **Download the APK** from the GitHub Actions artifacts
        2. **Transfer to your device** via USB, cloud storage, or direct download
        3. **Navigate to the APK** using your file manager
        4. **Tap the APK file** to begin installation
        5. **Follow the prompts** and tap "Install"

        ## Troubleshooting

        ### "App not installed" Error
        - Ensure original Instagram is completely uninstalled
        - Clear Google Play Store cache
        - Try installing via ADB: \`adb install -r instagram-instafel-${{ github.event.inputs.apk_version }}.apk\`

        ### "Package conflicts with existing package" Error
        - Uninstall any Instagram variants (Instagram Lite, Business, etc.)
        - Restart device and try again

        ### "Not compatible with this device" Error
        - Wrong architecture selected - try different target_arch option
        - Device may be too old (requires Android 5.0+)
        - Check if your device supports ${{ github.event.inputs.target_arch }}

        ### Device Architecture Check
        Install a terminal app and run:
        \`\`\`
        getprop ro.product.cpu.abi
        \`\`\`
        
        Or use CPU-Z app to check your device's architecture.

        ## Android 15 Specific Notes
        - Notification permissions will be requested on first launch
        - Some features may require additional permissions
        - If camera/microphone access issues occur, grant permissions manually

        ## Post-Installation
        1. **First Launch**: May take longer than usual
        2. **Login**: Use your existing Instagram credentials
        3. **Permissions**: Grant all requested permissions for full functionality
        4. **Updates**: This APK won't auto-update - manual updates required

        ## Support
        - Check device compatibility before installation
        - Ensure sufficient storage space (>200MB recommended)
        - Consider backing up your Instagram data before switching

        ## Security Notes
        - This APK is modified and won't receive official updates
        - Only install from trusted sources
        - Regular security scans recommended
        EOF

    - name: Upload Installation Guide
      uses: actions/upload-artifact@v4
      with:
        name: installation-guide-${{ github.event.inputs.apk_version }}
        path: workspace/installation-guide.md
        retention-days: 30

    - name: Create Debug Information
      run: |
        cd workspace
        
        echo "=== DEBUG INFORMATION ===" > debug-info.txt
        echo "Build Date: $(date)" >> debug-info.txt
        echo "Bundle Type: $BUNDLE_TYPE" >> debug-info.txt
        echo "Target Architecture: ${{ github.event.inputs.target_arch }}" >> debug-info.txt
        echo "APK Version: ${{ github.event.inputs.apk_version }}" >> debug-info.txt
        echo "" >> debug-info.txt
        
        echo "=== ORIGINAL APK INFO ===" >> debug-info.txt
        $ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-alpha.apk >> debug-info.txt 2>&1 || echo "Could not read original APK" >> debug-info.txt
        echo "" >> debug-info.txt
        
        echo "=== PATCHED APK INFO ===" >> debug-info.txt
        $ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-instafel-${{ github.event.inputs.apk_version }}.apk >> debug-info.txt 2>&1 || echo "Could not read patched APK" >> debug-info.txt
        echo "" >> debug-info.txt
        
        echo "=== FILE SIZES ===" >> debug-info.txt
        ls -lh instagram-*.apk >> debug-info.txt 2>&1 || echo "Could not list files" >> debug-info.txt

    - name: Upload Debug Information
      uses: actions/upload-artifact@v4
      with:
        name: debug-info-${{ github.event.inputs.apk_version }}
        path: workspace/debug-info.txt
        retention-days: 30
