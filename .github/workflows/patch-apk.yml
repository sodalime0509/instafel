name: Instafel APK Patcher (Android 15 Compatible)

on:
  workflow_dispatch:
    inputs:
      instagram_apk_url:
        description: 'Instagram APK/AAB/APKM/XAPK Download URL'
        required: true
        type: string
      apk_version:
        description: 'APK Version (for naming)'
        required: true
        type: string
        default: 'latest'

jobs:
  patch-apk:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Instafel Repository
      uses: actions/checkout@v4
      with:
        repository: mamiiblt/instafel
        path: instafel

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Android SDK (Updated for Android 15)
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        target: android-34

    - name: Accept Android SDK Licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Install APK Tools & Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y apktool zipalign unzip xmlstarlet jq wget curl file

        # Install latest apktool version
        wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
        wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
        chmod +x apktool
        sudo mv apktool /usr/local/bin/
        sudo mv apktool_2.9.3.jar /usr/local/bin/apktool.jar

        # Install uber-apk-signer
        wget -q https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar
        chmod +x uber-apk-signer-1.3.0.jar
        sudo mv uber-apk-signer-1.3.0.jar /usr/local/bin/uber-apk-signer.jar

        # Install bundletool
        wget -q https://github.com/google/bundletool/releases/download/1.15.6/bundletool-all-1.15.6.jar
        chmod +x bundletool-all-1.15.6.jar
        sudo mv bundletool-all-1.15.6.jar /usr/local/bin/bundletool.jar

        # Add Android SDK tools to PATH
        echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

        # Verify installations
        echo "Verifying tool installations..."
        apktool --version || echo "‚ö†Ô∏è apktool not found"
        java -jar /usr/local/bin/uber-apk-signer.jar --version || echo "‚ö†Ô∏è uber-apk-signer not found"
        java -jar /usr/local/bin/bundletool.jar version || echo "‚ö†Ô∏è bundletool not found"

    - name: Download Instagram APK/AAB
      run: |
        mkdir -p downloads
        cd downloads

        for i in {1..3}; do
          curl -L \
            -H "User-Agent: Mozilla/5.0" \
            --max-time 300 \
            --retry 3 \
            --retry-delay 5 \
            -o instagram-file \
            "${{ github.event.inputs.instagram_apk_url }}" && break
          sleep 10
        done

        if [ ! -f instagram-file ] || [ ! -s instagram-file ]; then
          echo "‚ùå Download failed"
          exit 1
        fi

        file_type=$(file instagram-file)
        url_lower=$(echo "${{ github.event.inputs.instagram_apk_url }}" | tr '[:upper:]' '[:lower:]')

        if [[ $url_lower == *".xapk"* ]] || [[ $file_type == *"Zip archive"* ]]; then
          if unzip -l instagram-file | grep -q "manifest.json\|icon.png"; then
            mv instagram-file instagram-alpha.xapk
            echo "BUNDLE_TYPE=xapk" >> $GITHUB_ENV
          elif unzip -l instagram-file | grep -q "base.apk\|split_config"; then
            mv instagram-file instagram-alpha.apkm
            echo "BUNDLE_TYPE=apkm" >> $GITHUB_ENV
          else
            mv instagram-file instagram-alpha.apk
            echo "BUNDLE_TYPE=apk" >> $GITHUB_ENV
          fi
        elif [[ $url_lower == *".apkm"* ]]; then
          mv instagram-file instagram-alpha.apkm
          echo "BUNDLE_TYPE=apkm" >> $GITHUB_ENV
        elif [[ $url_lower == *".aab"* ]]; then
          mv instagram-file instagram-alpha.aab
          echo "BUNDLE_TYPE=aab" >> $GITHUB_ENV
        else
          mv instagram-file instagram-alpha.apk
          echo "BUNDLE_TYPE=apk" >> $GITHUB_ENV
        fi

        mv instagram-alpha.* ../
        cd ..

    - name: Setup Gradle
      run: |
        cd instafel
        chmod +x gradlew
        ./gradlew --version

    - name: Build Instafel Patcher
      run: |
        cd instafel
        if grep -r "keystores/instafel-app.jks" .; then
          mkdir -p config/keystores
          keytool -genkey -v -keystore config/keystores/instafel-app.jks \
            -alias instafel -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass dummy123 -keypass dummy123 \
            -dname "CN=Dummy, OU=Build, O=GitHub, L=Actions, S=CI, C=US"
        fi
        ./gradlew assembleDebug || ./gradlew build -x validateSigningRelease || ./gradlew assemble

    - name: Convert & Patch for Android 15
      run: |
        mkdir -p workspace
        cd workspace

        # Handle different bundle types
        if [[ "$BUNDLE_TYPE" == "xapk" ]]; then
          echo "Processing XAPK file..."
          unzip ../instagram-alpha.xapk -d xapk
          # Find the main APK (usually the largest one)
          main_apk=$(find xapk -name "*.apk" -type f -exec ls -la {} \; | sort -nrk5 | head -n1 | awk '{print $9}')
          if [ -z "$main_apk" ]; then
            main_apk=$(find xapk -name "*.apk" | head -n1)
          fi
          cp "$main_apk" instagram-alpha.apk
          echo "Selected APK: $main_apk"
        elif [[ "$BUNDLE_TYPE" == "apkm" ]]; then
          echo "Processing APKM file..."
          unzip ../instagram-alpha.apkm -d apkm
          main_apk=$(find apkm -name "*.apk" -type f -exec ls -la {} \; | sort -nrk5 | head -n1 | awk '{print $9}')
          if [ -z "$main_apk" ]; then
            main_apk=$(find apkm -name "*.apk" | head -n1)
          fi
          cp "$main_apk" instagram-alpha.apk
          echo "Selected APK: $main_apk"
        elif [[ "$BUNDLE_TYPE" == "aab" ]]; then
          echo "Processing AAB file..."
          cp ../instagram-alpha.aab ./
          cat > device-spec.json <<EOF
        {
          "supportedAbis": ["arm64-v8a", "armeabi-v7a"],
          "supportedLocales": ["en"],
          "screenDensity": 420,
          "sdkVersion": 34
        }
        EOF
          java -jar /usr/local/bin/bundletool.jar build-apks \
            --bundle=instagram-alpha.aab \
            --output=instagram-alpha.apks \
            --device-spec=device-spec.json \
            --mode=universal
          unzip instagram-alpha.apks
          cp universal.apk instagram-alpha.apk
        else
          echo "Processing APK file..."
          cp ../instagram-alpha.apk ./
        fi

        # Verify APK file
        if [ ! -f "instagram-alpha.apk" ] || [ ! -s "instagram-alpha.apk" ]; then
          echo "‚ùå APK file not found or empty"
          exit 1
        fi

        echo "APK size: $(du -h instagram-alpha.apk | cut -f1)"
        echo "APK info:"
        $ANDROID_HOME/build-tools/34.0.0/aapt dump badging instagram-alpha.apk | head -5 || echo "Could not read APK info"

        # Method 1: Try basic decompilation without resources
        echo "üîÑ Attempting basic decompilation..."
        if apktool d instagram-alpha.apk -o instagram-decompiled --force-all --no-res --no-assets; then
          echo "‚úÖ Basic decompilation successful"
          DECOMPILE_SUCCESS=true
        else
          echo "‚ö†Ô∏è Basic decompilation failed"
          DECOMPILE_SUCCESS=false
        fi

        # Method 2: If decompilation failed, try direct manifest modification
        if [ "$DECOMPILE_SUCCESS" = false ]; then
          echo "üîÑ Attempting direct APK modification..."
          mkdir -p instagram-decompiled
          unzip -q instagram-alpha.apk -d instagram-decompiled
          
          # Extract readable manifest using aapt
          $ANDROID_HOME/build-tools/34.0.0/aapt dump xmltree instagram-alpha.apk AndroidManifest.xml > instagram-decompiled/manifest_readable.txt
          
          # Create a modified APK by copying the original
          cp instagram-alpha.apk instagram-patched-unsigned.apk
          echo "‚úÖ Direct modification method prepared"
        else
          # Process the decompiled APK
          manifest="instagram-decompiled/AndroidManifest.xml"
          if [ -f "$manifest" ]; then
            echo "üìù Modifying AndroidManifest.xml..."
            cp "$manifest" "${manifest}.bak"
            
            # Update target SDK for Android 15
            sed -i 's/android:targetSdkVersion="[0-9]*"/android:targetSdkVersion="34"/' "$manifest"
            sed -i 's/android:compileSdkVersion="[0-9]*"/android:compileSdkVersion="34"/' "$manifest"
            
            # Add required permissions for Android 15
            if ! grep -q "android.permission.POST_NOTIFICATIONS" "$manifest"; then
              sed -i '/<uses-permission android:name="android.permission.INTERNET"/a\    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />' "$manifest"
            fi
            
            # Remove deprecated permissions
            sed -i '/android:name="android.permission.WRITE_EXTERNAL_STORAGE"/d' "$manifest"
            
            echo "‚úÖ Manifest modifications completed"
          fi

          # Update apktool.yml if exists
          apktool_yml="instagram-decompiled/apktool.yml"
          if [ -f "$apktool_yml" ]; then
            sed -i 's/targetSdkVersion: .*/targetSdkVersion: 34/' "$apktool_yml"
            sed -i 's/minSdkVersion: .*/minSdkVersion: 21/' "$apktool_yml"
          fi

          # Rebuild APK
          echo "üîÑ Rebuilding APK..."
          if apktool b instagram-decompiled -o instagram-patched-unsigned.apk --use-aapt2; then
            echo "‚úÖ APK rebuilt successfully with aapt2"
          elif apktool b instagram-decompiled -o instagram-patched-unsigned.apk; then
            echo "‚úÖ APK rebuilt successfully with aapt1"
          else
            echo "‚ö†Ô∏è Rebuild failed, using original APK"
            cp instagram-alpha.apk instagram-patched-unsigned.apk
          fi
        fi

        # Verify the output APK
        if [ -f "instagram-patched-unsigned.apk" ]; then
          echo "‚úÖ Unsigned APK created: $(du -h instagram-patched-unsigned.apk | cut -f1)"
        else
          echo "‚ùå Failed to create unsigned APK"
          exit 1
        fi

    - name: Sign APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'defaultpass123' }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'mykey' }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'defaultpass123' }}
      run: |
        cd workspace
        
        # Verify APK exists
        if [ ! -f "instagram-patched-unsigned.apk" ]; then
          echo "‚ùå Unsigned APK not found, using original APK"
          cp instagram-alpha.apk instagram-patched-unsigned.apk
        fi

        # Generate signing key
        keytool -genkey -v -keystore release-key.keystore \
          -alias "$KEY_ALIAS" -keyalg RSA -keysize 2048 -validity 10000 \
          -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" \
          -dname "CN=Dev, OU=GH, O=CI, L=City, ST=ST, C=US"

        # Align APK
        $ANDROID_HOME/build-tools/34.0.0/zipalign -f -v 4 instagram-patched-unsigned.apk instagram-patched-aligned.apk

        # Sign APK with all signature versions
        $ANDROID_HOME/build-tools/34.0.0/apksigner sign \
          --ks release-key.keystore \
          --ks-key-alias "$KEY_ALIAS" \
          --ks-pass pass:"$KEYSTORE_PASSWORD" \
          --key-pass pass:"$KEY_PASSWORD" \
          --v1-signing-enabled true \
          --v2-signing-enabled true \
          --v3-signing-enabled true \
          --v4-signing-enabled true \
          --out instagram-instafel-${{ github.event.inputs.apk_version }}.apk \
          instagram-patched-aligned.apk

        # Verify signature
        $ANDROID_HOME/build-tools/34.0.0/apksigner verify --verbose instagram-instafel-${{ github.event.inputs.apk_version }}.apk

        # Fallback signing with uber-apk-signer if needed
        if [ ! -f "instagram-instafel-${{ github.event.inputs.apk_version }}.apk" ]; then
          echo "‚ö†Ô∏è Primary signing failed, trying uber-apk-signer..."
          java -jar /usr/local/bin/uber-apk-signer.jar \
            --apks instagram-patched-aligned.apk \
            --out instagram-instafel-${{ github.event.inputs.apk_version }}.apk
        fi

    - name: Upload Patched APK
      uses: actions/upload-artifact@v4
      with:
        name: instafel-patched-apk-${{ github.event.inputs.apk_version }}
        path: workspace/instagram-instafel-${{ github.event.inputs.apk_version }}.apk
        retention-days: 30

    - name: Generate Installation Instructions
      run: |
        cd workspace
        cat <<EOF > installation-instructions.md
        # Installation Instructions for Android 15

        ## Before Installing:
        1. Enable Developer Options (tap "Build number" 7 times)
        2. Enable USB Debugging
        3. Allow installation from unknown sources

        ## Installation:
        1. Download the APK file
        2. Transfer to your Android device
        3. Tap to install

        ## Troubleshooting:
        - Signature mismatch: uninstall original Instagram first
        - Install blocked: check Play Protect
        - Compatibility: ensure correct architecture (arm64-v8a / armeabi-v7a)

        ## Android 15 Notes:
        - Target SDK 34
        - POST_NOTIFICATIONS permission included
        EOF

    - name: Upload Instructions
      uses: actions/upload-artifact@v4
      with:
        name: installation-instructions
        path: workspace/installation-instructions.md
        retention-days: 30
